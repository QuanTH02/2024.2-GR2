#!/usr/bin/env python3
"""
Script ƒë·ªÉ ph√¢n t√≠ch logic c·ªßa c√°c field trong file k·∫øt qu·∫£ JSON
Ki·ªÉm tra t√≠nh nh·∫•t qu√°n v√† ƒë√∫ng ƒë·∫Øn c·ªßa c√°c field
"""

import json
import os
from typing import Dict, List, Any

def analyze_results_logic(file_path: str) -> Dict[str, Any]:
    """Ph√¢n t√≠ch logic c·ªßa c√°c field trong file k·∫øt qu·∫£"""
    
    with open(file_path, 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    analysis = {
        'total_samples': len(data),
        'logic_errors': [],
        'inconsistencies': [],
        'field_analysis': {},
        'success_distribution': {},
        'bleu_analysis': {}
    }
    
    # Ph√¢n t√≠ch t·ª´ng sample
    for i, sample in enumerate(data):
        sample_errors = []
        
        # 1. Ki·ªÉm tra logic c·ªßa field 'success'
        success = sample.get('success', -1)
        pred_bleu = sample.get('pred_bleu', 0)
        after_attack_bleu = sample.get('after_attack_bleu', 0)
        change = sample.get('change', 0)
        query = sample.get('query', 0)
        changes = sample.get('changes', [])
        
        # Logic ki·ªÉm tra success:
        # success = 1: Attack th√†nh c√¥ng (BLEU gi·∫£m)
        # success = 2: Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán
        # success = 3: Gold output r·ªóng
        # success = 4: Attack th·∫•t b·∫°i (BLEU kh√¥ng gi·∫£m ho·∫∑c tƒÉng)
        
        expected_success = None
        if sample.get('gold_out', '').strip() == '':
            expected_success = 3
        elif change == 0:
            expected_success = 2
        elif after_attack_bleu < pred_bleu:
            expected_success = 1
        else:
            expected_success = 4
            
        if success != expected_success:
            sample_errors.append(f"Success logic error: expected {expected_success}, got {success}")
        
        # 2. Ki·ªÉm tra t√≠nh nh·∫•t qu√°n c·ªßa change v√† changes
        if change != len(changes):
            sample_errors.append(f"Change count mismatch: change={change}, len(changes)={len(changes)}")
        
        # 3. Ki·ªÉm tra logic c·ªßa query
        if change > 0 and query == 0:
            sample_errors.append(f"Query should not be 0 when changes exist: change={change}, query={query}")
        
        # 4. Ki·ªÉm tra BLEU scores
        if pred_bleu < 0 or pred_bleu > 100:
            sample_errors.append(f"Invalid pred_bleu: {pred_bleu}")
        if after_attack_bleu < 0 or after_attack_bleu > 100:
            sample_errors.append(f"Invalid after_attack_bleu: {after_attack_bleu}")
        
        # 5. Ki·ªÉm tra input v√† adv
        input_text = sample.get('input', '')
        adv_text = sample.get('adv', '')
        
        # N·∫øu c√≥ changes, adv ph·∫£i kh√°c input
        if change > 0 and input_text == adv_text:
            sample_errors.append(f"Adv should be different from input when changes exist")
        
        # 6. Ki·ªÉm tra imp_words
        imp_words = sample.get('imp_words', {})
        if change > 0 and not imp_words:
            sample_errors.append(f"Imp_words should not be empty when changes exist")
        
        if sample_errors:
            analysis['logic_errors'].append({
                'sample_index': i,
                'errors': sample_errors,
                'sample': sample
            })
        
        # Th·ªëng k√™ success distribution
        success_type = {
            1: 'Attack Success',
            2: 'No Changes',
            3: 'Empty Gold',
            4: 'Attack Failed'
        }.get(success, f'Unknown ({success})')
        
        analysis['success_distribution'][success_type] = analysis['success_distribution'].get(success_type, 0) + 1
    
    # Ph√¢n t√≠ch BLEU scores
    pred_bleus = [s.get('pred_bleu', 0) for s in data]
    after_bleus = [s.get('after_attack_bleu', 0) for s in data]
    
    analysis['bleu_analysis'] = {
        'pred_bleu_stats': {
            'min': min(pred_bleus),
            'max': max(pred_bleus),
            'avg': sum(pred_bleus) / len(pred_bleus),
            'zero_count': pred_bleus.count(0)
        },
        'after_bleu_stats': {
            'min': min(after_bleus),
            'max': max(after_bleus),
            'avg': sum(after_bleus) / len(after_bleus),
            'zero_count': after_bleus.count(0)
        },
        'bleu_decrease_count': sum(1 for p, a in zip(pred_bleus, after_bleus) if a < p),
        'bleu_increase_count': sum(1 for p, a in zip(pred_bleus, after_bleus) if a > p),
        'bleu_same_count': sum(1 for p, a in zip(pred_bleus, after_bleus) if a == p)
    }
    
    # Ph√¢n t√≠ch field consistency
    analysis['field_analysis'] = {
        'samples_with_empty_input': sum(1 for s in data if not s.get('input', '').strip()),
        'samples_with_empty_gold': sum(1 for s in data if not s.get('gold_out', '').strip()),
        'samples_with_changes': sum(1 for s in data if s.get('change', 0) > 0),
        'samples_with_imp_words': sum(1 for s in data if s.get('imp_words', {})),
        'avg_query_count': sum(s.get('query', 0) for s in data) / len(data)
    }
    
    return analysis

def print_analysis_report(analysis: Dict[str, Any]):
    """In b√°o c√°o ph√¢n t√≠ch"""
    print("=" * 60)
    print("PH√ÇN T√çCH LOGIC K·∫æT QU·∫¢ JSON")
    print("=" * 60)
    
    print(f"\nüìä T·ªîNG QUAN:")
    print(f"   - T·ªïng s·ªë samples: {analysis['total_samples']}")
    print(f"   - S·ªë l·ªói logic: {len(analysis['logic_errors'])}")
    
    print(f"\nüéØ PH√ÇN B·ªê SUCCESS:")
    for success_type, count in analysis['success_distribution'].items():
        percentage = (count / analysis['total_samples']) * 100
        print(f"   - {success_type}: {count} ({percentage:.1f}%)")
    
    print(f"\nüìà PH√ÇN T√çCH BLEU SCORES:")
    bleu = analysis['bleu_analysis']
    print(f"   - Pred BLEU - Min: {bleu['pred_bleu_stats']['min']:.2f}, Max: {bleu['pred_bleu_stats']['max']:.2f}, Avg: {bleu['pred_bleu_stats']['avg']:.2f}")
    print(f"   - After BLEU - Min: {bleu['after_bleu_stats']['min']:.2f}, Max: {bleu['after_bleu_stats']['max']:.2f}, Avg: {bleu['after_bleu_stats']['avg']:.2f}")
    print(f"   - BLEU gi·∫£m: {bleu['bleu_decrease_count']} samples")
    print(f"   - BLEU tƒÉng: {bleu['bleu_increase_count']} samples")
    print(f"   - BLEU kh√¥ng ƒë·ªïi: {bleu['bleu_same_count']} samples")
    
    print(f"\nüîç PH√ÇN T√çCH FIELD:")
    field = analysis['field_analysis']
    print(f"   - Samples c√≥ input r·ªóng: {field['samples_with_empty_input']}")
    print(f"   - Samples c√≥ gold output r·ªóng: {field['samples_with_empty_gold']}")
    print(f"   - Samples c√≥ thay ƒë·ªïi: {field['samples_with_changes']}")
    print(f"   - Samples c√≥ imp_words: {field['samples_with_imp_words']}")
    print(f"   - Trung b√¨nh s·ªë query: {field['avg_query_count']:.1f}")
    
    if analysis['logic_errors']:
        print(f"\n‚ùå L·ªñI LOGIC PH√ÅT HI·ªÜN:")
        for error in analysis['logic_errors'][:10]:  # Ch·ªâ hi·ªÉn th·ªã 10 l·ªói ƒë·∫ßu
            print(f"   Sample {error['sample_index']}:")
            for err in error['errors']:
                print(f"     - {err}")
        
        if len(analysis['logic_errors']) > 10:
            print(f"     ... v√† {len(analysis['logic_errors']) - 10} l·ªói kh√°c")
    else:
        print(f"\n‚úÖ KH√îNG C√ì L·ªñI LOGIC N√ÄO PH√ÅT HI·ªÜN!")

def main():
    """Main function"""
    file_path = "output/translation/codet5/codebert/cs_java_test_run/66.json"
    
    if not os.path.exists(file_path):
        print(f"‚ùå File kh√¥ng t·ªìn t·∫°i: {file_path}")
        return
    
    print("üîç ƒêang ph√¢n t√≠ch file k·∫øt qu·∫£...")
    analysis = analyze_results_logic(file_path)
    print_analysis_report(analysis)
    
    # L∆∞u b√°o c√°o chi ti·∫øt
    report_file = "analysis_report.json"
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(analysis, f, indent=2, ensure_ascii=False)
    print(f"\nüíæ B√°o c√°o chi ti·∫øt ƒë√£ l∆∞u v√†o: {report_file}")

if __name__ == "__main__":
    main() 