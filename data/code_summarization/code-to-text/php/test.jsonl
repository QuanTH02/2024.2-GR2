{"code": "public class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n    \n    public int subtract(int a, int b) {\n        return a - b;\n    }\n    \n    public int multiply(int a, int b) {\n        return a * b;\n    }\n    \n    public double divide(int a, int b) {\n        if (b == 0) throw new ArithmeticException(\"Division by zero\");\n        return (double) a / b;\n    }\n}", "docstring": "A simple calculator class with basic arithmetic operations including addition, subtraction, multiplication, and division with error handling for division by zero."}
{"code": "public class StringUtils {\n    public static String reverse(String str) {\n        if (str == null) return null;\n        return new StringBuilder(str).reverse().toString();\n    }\n    \n    public static boolean isEmpty(String str) {\n        return str == null || str.length() == 0;\n    }\n    \n    public static String toUpperCase(String str) {\n        return str != null ? str.toUpperCase() : null;\n    }\n    \n    public static int countWords(String str) {\n        if (isEmpty(str)) return 0;\n        return str.trim().split(\"\\s+\").length;\n    }\n}", "docstring": "Utility class for string operations including reverse, empty check, case conversion, and word counting functionality."}
{"code": "public class ArrayHelper {\n    public static int[] sort(int[] arr) {\n        if (arr == null) return null;\n        Arrays.sort(arr);\n        return arr;\n    }\n    \n    public static int findMax(int[] arr) {\n        if (arr == null || arr.length == 0) return -1;\n        return Arrays.stream(arr).max().getAsInt();\n    }\n    \n    public static int findMin(int[] arr) {\n        if (arr == null || arr.length == 0) return -1;\n        return Arrays.stream(arr).min().getAsInt();\n    }\n    \n    public static double average(int[] arr) {\n        if (arr == null || arr.length == 0) return 0.0;\n        return Arrays.stream(arr).average().orElse(0.0);\n    }\n}", "docstring": "Helper class for array operations including sorting, finding maximum and minimum values, and calculating average of array elements."}
{"code": "public class FileHandler {\n    public static void writeToFile(String filename, String content) {\n        try (FileWriter writer = new FileWriter(filename)) {\n            writer.write(content);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    \n    public static String readFromFile(String filename) {\n        try (BufferedReader reader = new BufferedReader(new FileReader(filename))) {\n            return reader.lines().collect(Collectors.joining(\"\\n\"));\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n    \n    public static boolean fileExists(String filename) {\n        return new File(filename).exists();\n    }\n    \n    public static long getFileSize(String filename) {\n        File file = new File(filename);\n        return file.exists() ? file.length() : -1;\n    }\n}", "docstring": "File handling utility class with methods for writing to files, reading from files, checking file existence, and getting file size."}
{"code": "public class MathUtils {\n    public static double power(double base, double exponent) {\n        return Math.pow(base, exponent);\n    }\n    \n    public static int factorial(int n) {\n        if (n <= 1) return 1;\n        return n * factorial(n - 1);\n    }\n    \n    public static boolean isPrime(int n) {\n        if (n < 2) return false;\n        for (int i = 2; i <= Math.sqrt(n); i++) {\n            if (n % i == 0) return false;\n        }\n        return true;\n    }\n    \n    public static int gcd(int a, int b) {\n        while (b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n}", "docstring": "Mathematical utility class providing functions for power calculation, factorial computation, prime number checking, and greatest common divisor calculation."}
