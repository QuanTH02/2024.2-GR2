{"code": "public class Calculator {\n    public static String getInfo() {\n        return \"Basic arithmetic operations\";\n    }\n}", "docstring": "Calculator class with simple implementation"}
{"code": "public class Calculator {\n    private static final String INFO = \"Basic arithmetic operations\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "Calculator class with medium implementation"}
{"code": "public class Calculator {\n    private static final String INFO = \"Basic arithmetic operations\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "Calculator class with complex implementation"}
{"code": "public class StringUtils {\n    public static String getInfo() {\n        return \"String manipulation utilities\";\n    }\n}", "docstring": "StringUtils class with simple implementation"}
{"code": "public class StringUtils {\n    private static final String INFO = \"String manipulation utilities\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "StringUtils class with medium implementation"}
{"code": "public class StringUtils {\n    private static final String INFO = \"String manipulation utilities\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "StringUtils class with complex implementation"}
{"code": "public class ArrayHelper {\n    public static String getInfo() {\n        return \"Array processing utilities\";\n    }\n}", "docstring": "ArrayHelper class with simple implementation"}
{"code": "public class ArrayHelper {\n    private static final String INFO = \"Array processing utilities\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "ArrayHelper class with medium implementation"}
{"code": "public class ArrayHelper {\n    private static final String INFO = \"Array processing utilities\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "ArrayHelper class with complex implementation"}
{"code": "public class FileHandler {\n    public static String getInfo() {\n        return \"File I/O operations\";\n    }\n}", "docstring": "FileHandler class with simple implementation"}
{"code": "public class FileHandler {\n    private static final String INFO = \"File I/O operations\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "FileHandler class with medium implementation"}
{"code": "public class FileHandler {\n    private static final String INFO = \"File I/O operations\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "FileHandler class with complex implementation"}
{"code": "public class MathUtils {\n    public static String getInfo() {\n        return \"Mathematical functions\";\n    }\n}", "docstring": "MathUtils class with simple implementation"}
{"code": "public class MathUtils {\n    private static final String INFO = \"Mathematical functions\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "MathUtils class with medium implementation"}
{"code": "public class MathUtils {\n    private static final String INFO = \"Mathematical functions\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "MathUtils class with complex implementation"}
{"code": "public class DateUtils {\n    public static String getInfo() {\n        return \"Date and time utilities\";\n    }\n}", "docstring": "DateUtils class with simple implementation"}
{"code": "public class DateUtils {\n    private static final String INFO = \"Date and time utilities\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "DateUtils class with medium implementation"}
{"code": "public class DateUtils {\n    private static final String INFO = \"Date and time utilities\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "DateUtils class with complex implementation"}
{"code": "public class NetworkUtils {\n    public static String getInfo() {\n        return \"Network operations\";\n    }\n}", "docstring": "NetworkUtils class with simple implementation"}
{"code": "public class NetworkUtils {\n    private static final String INFO = \"Network operations\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "NetworkUtils class with medium implementation"}
{"code": "public class NetworkUtils {\n    private static final String INFO = \"Network operations\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "NetworkUtils class with complex implementation"}
{"code": "public class DatabaseHelper {\n    public static String getInfo() {\n        return \"Database operations\";\n    }\n}", "docstring": "DatabaseHelper class with simple implementation"}
{"code": "public class DatabaseHelper {\n    private static final String INFO = \"Database operations\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "DatabaseHelper class with medium implementation"}
{"code": "public class DatabaseHelper {\n    private static final String INFO = \"Database operations\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "DatabaseHelper class with complex implementation"}
{"code": "public class EncryptionUtils {\n    public static String getInfo() {\n        return \"Encryption and security\";\n    }\n}", "docstring": "EncryptionUtils class with simple implementation"}
{"code": "public class EncryptionUtils {\n    private static final String INFO = \"Encryption and security\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "EncryptionUtils class with medium implementation"}
{"code": "public class EncryptionUtils {\n    private static final String INFO = \"Encryption and security\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "EncryptionUtils class with complex implementation"}
{"code": "public class ValidationUtils {\n    public static String getInfo() {\n        return \"Input validation utilities\";\n    }\n}", "docstring": "ValidationUtils class with simple implementation"}
{"code": "public class ValidationUtils {\n    private static final String INFO = \"Input validation utilities\";\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n}", "docstring": "ValidationUtils class with medium implementation"}
{"code": "public class ValidationUtils {\n    private static final String INFO = \"Input validation utilities\";\n    private static final int MAX_RETRIES = 3;\n    private static final double TIMEOUT = 30.0;\n    \n    public static String getInfo() {\n        return INFO;\n    }\n    \n    public static boolean isValid(String input) {\n        return input != null && !input.trim().isEmpty();\n    }\n    \n    public static String process(String data) {\n        if (!isValid(data)) return null;\n        return data.trim().toLowerCase();\n    }\n    \n    public static Result executeWithRetry(String input) {\n        int attempts = 0;\n        while (attempts < MAX_RETRIES) {\n            try {\n                String result = process(input);\n                if (result != null) {\n                    return new Result(true, result, null);\n                }\n            } catch (Exception e) {\n                attempts++;\n                if (attempts >= MAX_RETRIES) {\n                    return new Result(false, null, e.getMessage());\n                }\n            }\n        }\n        return new Result(false, null, \"Max retries exceeded\");\n    }\n    \n    public static class Result {\n        private final boolean success;\n        private final String data;\n        private final String error;\n        \n        public Result(boolean success, String data, String error) {\n            this.success = success;\n            this.data = data;\n            this.error = error;\n        }\n        \n        public boolean isSuccess() { return success; }\n        public String getData() { return data; }\n        public String getError() { return error; }\n    }\n}", "docstring": "ValidationUtils class with complex implementation"}
